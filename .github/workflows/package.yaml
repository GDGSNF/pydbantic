name: Tests, Packaging, and Upload to PyPI
on:
  push:
    branches:
      - main
jobs:
  # Label of the container job
  test-postgres-mysql-sqlite:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    #container: joshjamison/python38:latest
    strategy:
      matrix:
        python-version: [3.7,3.8,3.9]

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Provide the password for postgres
        ports:
        - 6379:6379
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: abcd1234
          POSTGRES_DB: database
        ports:
        - 5432:5432

        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mysql:
        # Docker Hub image
        image: mysql
        # Provide the password for postgres
        env:
          MYSQL_USER: josh
          MYSQL_PASSWORD: abcd1234
          MYSQL_ROOT_PASSWORD: abcd1234
          MYSQL_DATABASE: joshdb
        ports:
        - 3306:3306

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -r requirements-test.txt
      - name: Run Tests
        run: |
          for env in sqlite postgres; do
            export ENV=$env; 
            pytest tests/test_database.py;
            pytest tests/test_model_insertions.py;
            pytest tests/test_model_updates.py;
            pytest tests/test_model_deletions.py;
            pytest tests/test_models.py;
            pytest tests/test_query_caching.py;
            pytest tests/test_querying.py;
            pytest tests/test_query_no_caching.py;
            pytest tests/test_integration_fastapi.py;
            pytest tests/migrations/test_model_migration_0.py;
            pytest tests/migrations/test_model_migration_1.py;
            pytest tests/migrations/test_model_migration_2.py;
            pytest tests/migrations/test_model_migration_3.py;
          done

  package:
    needs: test-postgres-mysql-sqlite
    name: Release to PyPI
    runs-on: ubuntu-latest
    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install Packaging dependencies
        run: |
          pip install wheel twine

      - name: Package & Test PyPI Installation
        run: |
          export NEXT_VERSION=$(pip -qqq download pydbantic && ls pydbantic*.whl | sed 's/-/" "/g' | awk '{print "(" $2 ")"}' |  python nextbuild.py)
          sed -i 's/NEXT_VERSION/'$NEXT_VERSION'/g' setup.py
          python setup.py bdist_wheel
          export PYQL_PACKAGE=$(pwd)/dist/pydbantic-$NEXT_VERSION-py3-none-any.whl
          pip install $(echo -n $PYQL_PACKAGE)

      - name: Upload to PyPi
        env: # Or as an environment variable
          PYPI: ${{ secrets.PYPI }}
        run: |
          export NEXT_VERSION=$(pip -qqq download pydbantic && ls pydbantic*.whl | sed 's/-/" "/g' | awk '{print "(" $2 ")"}' |  python nextbuild.py) 
          python -m twine upload $(pwd)/dist/pydbantic-$NEXT_VERSION-py3-none-any.whl -u codemation -p $PYPI